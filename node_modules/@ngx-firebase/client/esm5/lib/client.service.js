import { __decorate, __param } from "tslib";
import { Inject, Injectable } from '@angular/core';
import * as firebase from 'firebase/app';
// todo setup dynamic imports
import 'firebase/firestore';
import 'firebase/auth';
import 'firebase/storage';
import * as i0 from "@angular/core";
var NgxFirebaseClientService = /** @class */ (function () {
    function NgxFirebaseClientService(firebaseConfig) {
        this.firebaseConfig = firebaseConfig;
    }
    Object.defineProperty(NgxFirebaseClientService.prototype, "firebase", {
        get: function () {
            if (!firebase.apps.length) {
                firebase.initializeApp(this.firebaseConfig);
            }
            return firebase;
        },
        enumerable: true,
        configurable: true
    });
    NgxFirebaseClientService.prototype.auth = function () {
        return this.firebase.auth();
    };
    NgxFirebaseClientService.prototype.storage = function () {
        return this.firebase.storage();
    };
    NgxFirebaseClientService.prototype.firestore = function () {
        return this.firebase.firestore();
    };
    NgxFirebaseClientService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: ['firebaseConfig',] }] }
    ]; };
    NgxFirebaseClientService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxFirebaseClientService_Factory() { return new NgxFirebaseClientService(i0.ɵɵinject("firebaseConfig")); }, token: NgxFirebaseClientService, providedIn: "root" });
    NgxFirebaseClientService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Inject('firebaseConfig'))
    ], NgxFirebaseClientService);
    return NgxFirebaseClientService;
}());
export { NgxFirebaseClientService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWZpcmViYXNlL2NsaWVudC8iLCJzb3VyY2VzIjpbImxpYi9jbGllbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxLQUFLLFFBQVEsTUFBTSxjQUFjLENBQUM7QUFFekMsNkJBQTZCO0FBQzdCLE9BQU8sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxlQUFlLENBQUM7QUFDdkIsT0FBTyxrQkFBa0IsQ0FBQzs7QUFLMUI7SUFPRSxrQ0FBOEMsY0FBbUI7UUFBbkIsbUJBQWMsR0FBZCxjQUFjLENBQUs7SUFDakUsQ0FBQztJQVBELHNCQUFJLDhDQUFRO2FBQVo7WUFDRSxJQUFJLENBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQzFCLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2FBQzdDO1lBQ0QsT0FBTyxRQUFRLENBQUM7UUFDbEIsQ0FBQzs7O09BQUE7SUFJRCx1Q0FBSSxHQUFKO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCwwQ0FBTyxHQUFQO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCw0Q0FBUyxHQUFUO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ25DLENBQUM7O2dEQWJZLE1BQU0sU0FBQyxnQkFBZ0I7OztJQVB6Qix3QkFBd0I7UUFIcEMsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztRQVFhLFdBQUEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUE7T0FQMUIsd0JBQXdCLENBcUJwQzttQ0FoQ0Q7Q0FnQ0MsQUFyQkQsSUFxQkM7U0FyQlksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UvYXBwJztcblxuLy8gdG9kbyBzZXR1cCBkeW5hbWljIGltcG9ydHNcbmltcG9ydCAnZmlyZWJhc2UvZmlyZXN0b3JlJztcbmltcG9ydCAnZmlyZWJhc2UvYXV0aCc7XG5pbXBvcnQgJ2ZpcmViYXNlL3N0b3JhZ2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hGaXJlYmFzZUNsaWVudFNlcnZpY2Uge1xuICBnZXQgZmlyZWJhc2UoKSB7XG4gICAgaWYgKCEgZmlyZWJhc2UuYXBwcy5sZW5ndGgpIHtcbiAgICAgIGZpcmViYXNlLmluaXRpYWxpemVBcHAodGhpcy5maXJlYmFzZUNvbmZpZyk7XG4gICAgfVxuICAgIHJldHVybiBmaXJlYmFzZTtcbiAgfVxuICBjb25zdHJ1Y3RvcihASW5qZWN0KCdmaXJlYmFzZUNvbmZpZycpIHByaXZhdGUgZmlyZWJhc2VDb25maWc6IGFueSkge1xuICB9XG5cbiAgYXV0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5maXJlYmFzZS5hdXRoKCk7XG4gIH1cblxuICBzdG9yYWdlKCkge1xuICAgIHJldHVybiB0aGlzLmZpcmViYXNlLnN0b3JhZ2UoKTtcbiAgfVxuXG4gIGZpcmVzdG9yZSgpIHtcbiAgICByZXR1cm4gdGhpcy5maXJlYmFzZS5maXJlc3RvcmUoKTtcbiAgfVxufVxuIl19