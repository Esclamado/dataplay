import { __decorate, __param } from 'tslib';
import { Inject, ɵɵdefineInjectable, ɵɵinject, Injectable, NgModule } from '@angular/core';
import * as firebase from 'firebase/app';
import { apps, initializeApp } from 'firebase/app';
import 'firebase/firestore';
import 'firebase/auth';
import 'firebase/storage';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
let NgxFirebaseClientService = class NgxFirebaseClientService {
    constructor(firebaseConfig) {
        this.firebaseConfig = firebaseConfig;
    }
    get firebase() {
        if (!apps.length) {
            initializeApp(this.firebaseConfig);
        }
        return firebase;
    }
    auth() {
        return this.firebase.auth();
    }
    storage() {
        return this.firebase.storage();
    }
    firestore() {
        return this.firebase.firestore();
    }
};
NgxFirebaseClientService.ɵfac = function NgxFirebaseClientService_Factory(t) { return new (t || NgxFirebaseClientService)(ɵngcc0.ɵɵinject('firebaseConfig')); };
NgxFirebaseClientService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ['firebaseConfig',] }] }
];
NgxFirebaseClientService.ɵprov = ɵɵdefineInjectable({ factory: function NgxFirebaseClientService_Factory() { return new NgxFirebaseClientService(ɵɵinject("firebaseConfig")); }, token: NgxFirebaseClientService, providedIn: "root" });
NgxFirebaseClientService = __decorate([ __param(0, Inject('firebaseConfig'))
], NgxFirebaseClientService);

var NgxFirebaseClientModule_1;
let NgxFirebaseClientModule = NgxFirebaseClientModule_1 = class NgxFirebaseClientModule {
    static forRoot(firebaseConfig) {
        return {
            ngModule: NgxFirebaseClientModule_1,
            providers: [
                NgxFirebaseClientService,
                {
                    provide: 'firebaseConfig',
                    useValue: firebaseConfig
                }
            ]
        };
    }
};
NgxFirebaseClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxFirebaseClientModule });
NgxFirebaseClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxFirebaseClientModule_Factory(t) { return new (t || NgxFirebaseClientModule)(); }, imports: [[
            CommonModule
        ]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxFirebaseClientService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: ['firebaseConfig']
            }] }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxFirebaseClientModule, { imports: function () { return [CommonModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxFirebaseClientModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [
                    CommonModule
                ]
            }]
    }], null, null); })();

/*
 * Public API Surface of client
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxFirebaseClientModule, NgxFirebaseClientService };

//# sourceMappingURL=ngx-firebase-client.js.map